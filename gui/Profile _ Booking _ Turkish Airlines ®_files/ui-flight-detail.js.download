define([
	'knockout',
	'eteration/widgets/widget-util',
	'eteration/eteration-i18n',
	'text!eteration/widgets/template/template-flight-detail.html',
	'text!eteration/widgets/template/template-flight-detail-domestic.html',
    'eteration/widgets/ui-isodate',
    'eteration/widgets/ui-layover'
],
function(ko, widgetUtil, i18n, template, tempDomestic) {

	widgetUtil.setupStringBasedTemplate(ko);
	
	function getDayChangeCount(flightData) {
		var segments = flightData.segments;
		var count = 0;
		if (flightData.firstSegment.departureDateTimeISO) {
			count = flightData.lastSegment.arrivalDateTimeISO.epochDaysLocal - flightData.firstSegment.departureDateTimeISO.epochDaysLocal;
		} else {
			count = Math.floor((segments[segments.length - 1].arrivalDateTime + segments[segments.length - 1].arrivalDateTimeTimeZoneRawOffset) / 8.64e7) - Math.floor((segments[0].departureDateTime + segments[0].departureDateTimeTimeZoneRawOffset) / 8.64e7);
		}
		return count;
	}
	
	function getDayChangeText(count) {
		if (count === 0)
			return '';
		else if (count === 1)
			return i18n.get('TextField-OB-165.nextday');
		else if (count === 2)
			return '+ ' + i18n.get('TextField-OB-165.2days');
		else if (count === 3)
			return '+ ' + i18n.get('TextField-OB-165.3days');
	}
	
	ko.templates["flight-detail"] = template;

	ko.bindingHandlers['flight-detail'] = {
		makeTemplateValueAccessor : function(valueAccessor, allBindings, element) {
			var self = {};
			self.panel = valueAccessor().panel || false;
			self.getEligibilityFunction = self.panel.getHotelInstanbulEligibilityForSelectedFlight ? self.panel.getHotelInstanbulEligibilityForSelectedFlight : function() { };
			self.flight = valueAccessor().flight || {};
			self.segments = valueAccessor().flight.segments;
			self.isChangeFlight = valueAccessor().isChangeFlight || false;
			self.selectedFlight = valueAccessor().selectedFlight || false;
			self.isAwardTicket = valueAccessor().isAwardTicket || false;
			self.links = valueAccessor().links;
			self.showDetails = valueAccessor().showDetails || self.flight.showDetails;
			self.dayChangeCount = ko.observable(0);
			self.isDayChanged = function (flightData) {
				self.dayChangeCount(getDayChangeCount(flightData));
				return getDayChangeText(self.dayChangeCount() || 0);
			}
			
            return function() { return { name : 'flight-detail', data : self } };
		},
		init : function(element, valueAccessor, allBindings) {
			return ko.bindingHandlers.template.init(element, ko.bindingHandlers['flight-detail'].makeTemplateValueAccessor(valueAccessor, allBindings, element), allBindings);
		},
		update : function(element, valueAccessor, allBindings, viewModel, bindingContext) {
			return ko.bindingHandlers.template.update(element, ko.bindingHandlers['flight-detail'].makeTemplateValueAccessor(valueAccessor, allBindings, element), allBindings, viewModel, bindingContext);
		}
	};
	
	ko.virtualElements.allowedBindings['flight-detail'] = true;

	
	/*        flight detail domestic            */
	ko.templates["flight-detail-domestic"] = tempDomestic;

	ko.bindingHandlers['flight-detail-domestic'] = {
		makeTemplateValueAccessor : function(valueAccessor, allBindings, element) {
			var self = {};
			self.panel = valueAccessor().panel || false;
			self.getEligibilityFunction = self.panel.getHotelInstanbulEligibilityForSelectedFlight ? self.panel.getHotelInstanbulEligibilityForSelectedFlight : function() { };
			self.flight = valueAccessor().flight || {};
			self.isPhone = window.isPhone;
			self.segments = valueAccessor().flight.segments;
			self.isChangeFlight = valueAccessor().isChangeFlight || false;
			self.selectedFlight = valueAccessor().selectedFlight || false;
			self.isAwardTicket = valueAccessor().isAwardTicket || false;
			self.links = valueAccessor().links;
			self.dayChangeCount = ko.observable(0);
			self.isDayChanged = function (flightData) {
				self.dayChangeCount(getDayChangeCount(flightData));
				return getDayChangeText(self.dayChangeCount() || 0);
			}
			self.getSelectableColumn = function(d, e) {
				$(e.target).parents('.canvas-table-wrapper').find('.price-col:not(.disabled)').first().trigger('click');
			}
			
            return function() { return { name : 'flight-detail-domestic', data : self } };
		},
		init : function(element, valueAccessor, allBindings) {
			return ko.bindingHandlers.template.init(element, ko.bindingHandlers['flight-detail-domestic'].makeTemplateValueAccessor(valueAccessor, allBindings, element), allBindings);
		},
		update : function(element, valueAccessor, allBindings, viewModel, bindingContext) {
			return ko.bindingHandlers.template.update(element, ko.bindingHandlers['flight-detail-domestic'].makeTemplateValueAccessor(valueAccessor, allBindings, element), allBindings, viewModel, bindingContext);
		}
	};
	
	ko.virtualElements.allowedBindings['flight-detail-domestic'] = true;

});
